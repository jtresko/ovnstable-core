{
  "address": "0xc70a9929B92eD899403E621710d227ADdce6e4a7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAddressString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedByGateway",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "CallExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "CallSalt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "CallScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "Cancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDuration",
          "type": "uint256"
        }
      ],
      "name": "MinDelayChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "NewImplementationUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ovnAgent",
          "type": "address"
        }
      ],
      "name": "OvnAgentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_onlyAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_onlyAgentMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "payloads",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "executeBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "contract IAxelarGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "hashOperation",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "payloads",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "hashOperationBatch",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gateway",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_motherTimelock",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ovnAgent",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_motherChainId",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMotherChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperationDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperationPending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "isOperationReady",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "motherChainId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "motherTimelock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ovnAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "schedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "payloads",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "predecessor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "delay",
          "type": "uint256"
        }
      ],
      "name": "scheduleBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newImplementation",
          "type": "address"
        }
      ],
      "name": "setNewImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ovnAgent",
          "type": "address"
        }
      ],
      "name": "setOvnAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newDelay",
          "type": "uint256"
        }
      ],
      "name": "updateDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "6d5af6bb719925e984eb4fcce132a5ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddressString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedByGateway\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CallExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"CallSalt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"CallScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"MinDelayChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementationUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ovnAgent\",\"type\":\"address\"}],\"name\":\"OvnAgentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_onlyAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_onlyAgentMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"contract IAxelarGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"hashOperation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"hashOperationBatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_motherTimelock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ovnAgent\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_motherChainId\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMotherChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"isOperationReady\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"motherChainId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"motherTimelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ovnAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"predecessor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"scheduleBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newImplementation\",\"type\":\"address\"}],\"name\":\"setNewImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ovnAgent\",\"type\":\"address\"}],\"name\":\"setOvnAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"updateDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Modified OpenZeppelin Timelock under requirements Overnight Support two mode: - MOTHER CHAIN - CHILD CHAIN In Mother Chain mode: MotherTimelock exist on same chain with AgentTimelock. MotherTimelock directly change ovnAgent or upgrade AgentTimelock Available methods: - setOvnAgent - setNewImplementation In Child Chain Mode: MotherTimelock exist on a different basic chain from AgentTimelock MotherTimelock send transaction to Axelar on Mother Chain Axelar send translation to Child Chain Axelar Gateway on Child Chain call method directly: execute Available methods: - execute [Not to be confused with methods Timelock: execute, executeBatch]\",\"kind\":\"dev\",\"methods\":{\"_onlyAgent()\":{\"details\":\"Calling in modifier onlyAgent (see TimelockControllerUpgradeable) Checks permissions for executing methods: - schedule - scheduleBatch\"},\"_onlyAgentMembers()\":{\"details\":\"Calling in modifier onlyAgentMembers (see TimelockControllerUpgradeable) Checks permissions for executing methods: - cancel - execute - executeBatch Allow calling methods only ovnAgent or members of ovnAgent\"},\"cancel(bytes32)\":{\"details\":\"Cancel an operation. Requirements: - the caller must have the 'canceller' role.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"execute(address,uint256,bytes,bytes32,bytes32)\":{\"details\":\"Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role.\"},\"execute(bytes32,string,string,bytes)\":{\"details\":\"Allow to update ovnAgent or newImplementation by Axelar How is it working? MotherTimelock (Optimism) > send translation to Axelar -> Axelar Gateway execute it Working only on CHILD Chain\",\"params\":{\"payload\":\"- ['ActionOnAgent(uint256)', 'setAddress(address)'] Available params: ActionOnAgent:  0 - SET_NEW_AGENT  1 -  UPGRADE_TIMELOCK setAddress: - Address a new OvnAgent - Address a new implementation\"}},\"executeBatch(address[],uint256[],bytes[],bytes32,bytes32)\":{\"details\":\"Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Requirements: - the caller must have the 'executor' role.\"},\"getMinDelay()\":{\"details\":\"Returns the minimum delay for an operation to become valid. This value can be changed by executing an operation that calls `updateDelay`.\"},\"getTimestamp(bytes32)\":{\"details\":\"Returns the timestamp at which an operation becomes ready (0 for unset operations, 1 for done operations).\"},\"hashOperation(address,uint256,bytes,bytes32,bytes32)\":{\"details\":\"Returns the identifier of an operation containing a single transaction.\"},\"hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)\":{\"details\":\"Returns the identifier of an operation containing a batch of transactions.\"},\"isOperation(bytes32)\":{\"details\":\"Returns whether an id correspond to a registered operation. This includes both Pending, Ready and Done operations.\"},\"isOperationDone(bytes32)\":{\"details\":\"Returns whether an operation is done or not.\"},\"isOperationPending(bytes32)\":{\"details\":\"Returns whether an operation is pending or not. Note that a \\\"pending\\\" operation may also be \\\"ready\\\".\"},\"isOperationReady(bytes32)\":{\"details\":\"Returns whether an operation is ready for execution. Note that a \\\"ready\\\" operation is also \\\"pending\\\".\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155Receiver-onERC1155BatchReceived}.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155Receiver-onERC1155Received}.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"schedule(address,uint256,bytes,bytes32,bytes32,uint256)\":{\"details\":\"Schedule an operation containing a single transaction. Emits {CallSalt} if salt is nonzero, and {CallScheduled}. Requirements: - the caller must have the 'proposer' role.\"},\"scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)\":{\"details\":\"Schedule an operation containing a batch of transactions. Emits {CallSalt} if salt is nonzero, and one {CallScheduled} event per transaction in the batch. Requirements: - the caller must have the 'proposer' role.\"},\"setNewImplementation(address)\":{\"details\":\"Set a new implementation address Working only on MOTHER Chain Calling only MOTHER TIMELOCK\"},\"setOvnAgent(address)\":{\"details\":\"Set a new OVN Agent Working only on MOTHER Chain Calling only MOTHER TIMELOCK\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateDelay(uint256)\":{\"details\":\"Changes the minimum timelock duration for future operations. Emits a {MinDelayChange} event. Requirements: - the caller must be the timelock itself. This can only be achieved by scheduling and later executing an operation where the timelock is the target and the data is the ABI-encoded call to this function.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"motherTimelock\":{\"details\":\"Timelock to allow to change ovnAgent If is it mother chain (Optimism) then need to execute method: setOvnAgent() if is it child chain (!Optimism) then need to use Axelar Gateway\"},\"ovnAgent\":{\"details\":\"Confidant MultiSig - allow to change protocol USD+ Can execute methods: - schedule - scheduleBatch Members of MultiSig: Can execute methods: - cancel - execute - executeBatch\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute(bytes32,string,string,bytes)\":{\"notice\":\"[ONLY CHILD CHAIN MODE]\"},\"setNewImplementation(address)\":{\"notice\":\"[ONLY MOTHER CHAIN MODE]\"},\"setOvnAgent(address)\":{\"notice\":\"[ONLY MOTHER CHAIN MODE]\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AgentTimelock.sol\":\"AgentTimelock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from './IAxelarGateway.sol';\\n\\ninterface IAxelarExecutable {\\n    error InvalidAddress();\\n    error NotApprovedByGateway();\\n\\n    function gateway() external view returns (IAxelarGateway);\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4279ef3b4fe5e7082f39c665d4aeddc6d84fcc6fadaacd1d8ae604ba6146b8e6\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IGovernable } from './IGovernable.sol';\\n\\ninterface IAxelarGateway is IGovernable {\\n    /**********\\\\\\n    |* Errors *|\\n    \\\\**********/\\n\\n    error NotSelf();\\n    error NotProxy();\\n    error InvalidCodeHash();\\n    error SetupFailed();\\n    error InvalidAuthModule();\\n    error InvalidTokenDeployer();\\n    error InvalidAmount();\\n    error InvalidChainId();\\n    error InvalidCommands();\\n    error TokenDoesNotExist(string symbol);\\n    error TokenAlreadyExists(string symbol);\\n    error TokenDeployFailed(string symbol);\\n    error TokenContractDoesNotExist(address token);\\n    error BurnFailed(string symbol);\\n    error MintFailed(string symbol);\\n    error InvalidSetMintLimitsParams();\\n    error ExceedMintLimit(string symbol);\\n\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event TokenSent(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationAddress,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event ContractCall(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload\\n    );\\n\\n    event ContractCallWithToken(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event ContractCallApproved(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event ContractCallApprovedWithMint(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\\n\\n    event OperatorshipTransferred(bytes newOperatorsData);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /********************\\\\\\n    |* Public Functions *|\\n    \\\\********************/\\n\\n    function sendToken(\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function callContract(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function callContractWithToken(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function isContractCallApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash\\n    ) external view returns (bool);\\n\\n    function isContractCallAndMintApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function validateContractCall(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash\\n    ) external returns (bool);\\n\\n    function validateContractCallAndMint(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function authModule() external view returns (address);\\n\\n    function tokenDeployer() external view returns (address);\\n\\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\\n\\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    function adminEpoch() external view returns (uint256);\\n\\n    function adminThreshold(uint256 epoch) external view returns (uint256);\\n\\n    function admins(uint256 epoch) external view returns (address[] memory);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata setupParams\\n    ) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\",\"keccak256\":\"0xb31fdd99a622f9690b6a6eb969831d8021f49eb7c4729bf68e20da6266d4d7b3\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IGovernable Interface\\n * @notice This is an interface used by the AxelarGateway contract to manage governance and mint limiter roles.\\n */\\ninterface IGovernable {\\n    error NotGovernance();\\n    error NotMintLimiter();\\n    error InvalidGovernance();\\n    error InvalidMintLimiter();\\n\\n    event GovernanceTransferred(address indexed previousGovernance, address indexed newGovernance);\\n    event MintLimiterTransferred(address indexed previousGovernance, address indexed newGovernance);\\n\\n    /**\\n     * @notice Returns the governance address.\\n     * @return address of the governance\\n     */\\n    function governance() external view returns (address);\\n\\n    /**\\n     * @notice Returns the mint limiter address.\\n     * @return address of the mint limiter\\n     */\\n    function mintLimiter() external view returns (address);\\n\\n    /**\\n     * @notice Transfer the governance role to another address.\\n     * @param newGovernance The new governance address\\n     */\\n    function transferGovernance(address newGovernance) external;\\n\\n    /**\\n     * @notice Transfer the mint limiter role to another address.\\n     * @param newGovernance The new mint limiter address\\n     */\\n    function transferMintLimiter(address newGovernance) external;\\n}\\n\",\"keccak256\":\"0x686c534975bfc4e00f89be5e4a779a41a63f7c5fc204429c839bcdbf09584fd0\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/libs/AddressString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary StringToAddress {\\n    error InvalidAddressString();\\n\\n    function toAddress(string memory addressString) internal pure returns (address) {\\n        bytes memory stringBytes = bytes(addressString);\\n        uint160 addressNumber = 0;\\n        uint8 stringByte;\\n\\n        if (stringBytes.length != 42 || stringBytes[0] != '0' || stringBytes[1] != 'x') revert InvalidAddressString();\\n\\n        for (uint256 i = 2; i < 42; ++i) {\\n            stringByte = uint8(stringBytes[i]);\\n\\n            if ((stringByte >= 97) && (stringByte <= 102)) stringByte -= 87;\\n            else if ((stringByte >= 65) && (stringByte <= 70)) stringByte -= 55;\\n            else if ((stringByte >= 48) && (stringByte <= 57)) stringByte -= 48;\\n            else revert InvalidAddressString();\\n\\n            addressNumber |= uint160(uint256(stringByte) << ((41 - i) << 2));\\n        }\\n\\n        return address(addressNumber);\\n    }\\n}\\n\\nlibrary AddressToString {\\n    function toString(address address_) internal pure returns (string memory) {\\n        bytes memory addressBytes = abi.encodePacked(address_);\\n        bytes memory characters = '0123456789abcdef';\\n        bytes memory stringBytes = new bytes(42);\\n\\n        stringBytes[0] = '0';\\n        stringBytes[1] = 'x';\\n\\n        for (uint256 i; i < 20; ++i) {\\n            stringBytes[2 + i * 2] = characters[uint8(addressBytes[i] >> 4)];\\n            stringBytes[3 + i * 2] = characters[uint8(addressBytes[i] & 0x0f)];\\n        }\\n\\n        return string(stringBytes);\\n    }\\n}\\n\",\"keccak256\":\"0x4afddc49329b9a253af8066b60be50ed28c9fbeff2743ca4f3552d9e6738727c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/AgentTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport { IAxelarExecutable } from '@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol';\\nimport { IAxelarGateway } from '@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol';\\nimport \\\"@axelar-network/axelar-gmp-sdk-solidity/contracts/libs/AddressString.sol\\\";\\n\\nimport \\\"./openzeppelin/TimelockControllerUpgradeable.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\n\\n\\n/**\\n * @dev Modified OpenZeppelin Timelock under requirements Overnight\\n * Support two mode:\\n * - MOTHER CHAIN\\n * - CHILD CHAIN\\n\\n * In Mother Chain mode: MotherTimelock exist on same chain with AgentTimelock.\\n * MotherTimelock directly change ovnAgent or upgrade AgentTimelock\\n * Available methods:\\n * - setOvnAgent\\n * - setNewImplementation\\n\\n * In Child Chain Mode: MotherTimelock exist on a different basic chain from AgentTimelock\\n * MotherTimelock send transaction to Axelar on Mother Chain\\n * Axelar send translation to Child Chain\\n * Axelar Gateway on Child Chain call method directly: execute\\n * Available methods:\\n * - execute\\n * [Not to be confused with methods Timelock: execute, executeBatch]\\n */\\n\\ncontract AgentTimelock is Initializable, TimelockControllerUpgradeable, UUPSUpgradeable {\\n\\n\\n    /**\\n     * @dev Confidant MultiSig - allow to change protocol USD+\\n     * Can execute methods:\\n     * - schedule\\n     * - scheduleBatch\\n\\n     * Members of MultiSig:\\n     * Can execute methods:\\n     * - cancel\\n     * - execute\\n     * - executeBatch\\n     */\\n\\n    address public ovnAgent;\\n\\n    /**\\n     * @dev Timelock to allow to change ovnAgent\\n     * If is it mother chain (Optimism)\\n     * then need to execute method: setOvnAgent()\\n     * if is it child chain (!Optimism)\\n     * then need to use Axelar Gateway\\n     */\\n\\n    address public motherTimelock;\\n    string public motherChainId;\\n    IAxelarGateway public gateway;\\n    address public newImplementation;\\n\\n    enum ActionOnAgent {\\n        SET_NEW_AGENT,\\n        UPGRADE_TIMELOCK\\n    }\\n\\n\\n    event OvnAgentUpdated(address ovnAgent);\\n    event NewImplementationUpdate(address newImplementation);\\n\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address _gateway,\\n                        address _motherTimelock,\\n                        address _ovnAgent,\\n                        string memory _motherChainId\\n    ) initializer public {\\n        require(_motherTimelock != address(0), \\\"motherTimelock is zero\\\");\\n        require(_ovnAgent != address(0), \\\"ovnAgent is zero\\\");\\n        require(bytes(_motherChainId).length != 0, \\\"_motherChainId is empty\\\");\\n\\n\\n        // If gateway is null then it's MOTHER Chain (Axelar disabled)\\n        // If gateway is defined then it's CHILD Chain (Axelar enabled)\\n        if(_gateway != address(0)){\\n            gateway = IAxelarGateway(_gateway);\\n        }\\n\\n        motherTimelock = _motherTimelock;\\n        motherChainId = _motherChainId;\\n        ovnAgent = _ovnAgent;\\n\\n        __UUPSUpgradeable_init();\\n    }\\n\\n\\n    function _authorizeUpgrade(address _newImplementation)\\n    internal\\n    onlyAgentMembers\\n    override\\n    {\\n\\n        // First upgrade\\n        if(newImplementation == address(0)){\\n            newImplementation = _newImplementation;\\n        }else{\\n            // Mother governance should set a new address newImplementation by proposal\\n            // Agent Member execute upgradeTo on contract pass implementation address equal newImplementation\\n            require(newImplementation == _newImplementation, 'New implementation not equal');\\n        }\\n    }\\n\\n\\n    function isMotherChain() public view returns(bool) {\\n        return address(gateway) == address(0);\\n    }\\n\\n    /**\\n     * [ONLY MOTHER CHAIN MODE]\\n     * @dev Set a new OVN Agent\\n     * Working only on MOTHER Chain\\n     * Calling only MOTHER TIMELOCK\\n     */\\n\\n    function setOvnAgent(address _ovnAgent) external {\\n        require(isMotherChain(), 'only motherChain');\\n        require(msg.sender == motherTimelock, 'only motherTimelock');\\n\\n        _executeAction(ActionOnAgent.SET_NEW_AGENT, _ovnAgent);\\n    }\\n\\n\\n    /**\\n     * [ONLY MOTHER CHAIN MODE]\\n     * @dev Set a new implementation address\\n     * Working only on MOTHER Chain\\n     * Calling only MOTHER TIMELOCK\\n     */\\n\\n    function setNewImplementation(address _newImplementation) external {\\n        require(isMotherChain(), 'only motherChain');\\n        require(msg.sender == motherTimelock, 'only motherTimelock');\\n\\n        _executeAction(ActionOnAgent.UPGRADE_TIMELOCK, _newImplementation);\\n    }\\n\\n\\n    /**\\n     * [ONLY CHILD CHAIN MODE]\\n     * @dev Allow to update ovnAgent or newImplementation by Axelar\\n     * How is it working?\\n     * MotherTimelock (Optimism) > send translation to Axelar -> Axelar Gateway execute it\\n     * Working only on CHILD Chain\\n     * @param payload - ['ActionOnAgent(uint256)', 'setAddress(address)']\\n     *\\n     * Available params:\\n     *\\n     * ActionOnAgent:\\n     *  0 - SET_NEW_AGENT\\n     *  1 -  UPGRADE_TIMELOCK\\n     * setAddress:\\n     * - Address a new OvnAgent\\n     * - Address a new implementation\\n     */\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external {\\n        require(!isMotherChain(), 'not motherChain');\\n\\n        // Copy checks from AxelarGateway contracts\\n        require(msg.sender == address(gateway), \\\"only gateway\\\");\\n        bytes32 payloadHash = keccak256(payload);\\n\\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash)){\\n            revert IAxelarExecutable.NotApprovedByGateway();\\n        }\\n\\n        // Use Axelar library for convert from string to address type\\n        address source = StringToAddress.toAddress(sourceAddress);\\n        require(source == motherTimelock, 'only motherTimelock');\\n\\n        // TODO How correct equal is it?\\n        require(keccak256(bytes(sourceChain)) == keccak256(bytes(motherChainId)), 'only motherChainId');\\n\\n        // Support only certain actions\\n        // - Set a new ovnAgent\\n        // - Set newImplementation for upgradable\\n\\n        (ActionOnAgent action, address setAddress) = abi.decode(payload, (ActionOnAgent, address));\\n        _executeAction(action, setAddress);\\n    }\\n\\n    function _executeAction(ActionOnAgent action, address setAddress) internal {\\n        require(setAddress != address(0), 'setAddress is zero');\\n\\n        if (action == ActionOnAgent.SET_NEW_AGENT) {\\n            ovnAgent = setAddress;\\n            emit OvnAgentUpdated(setAddress);\\n        } else if (action == ActionOnAgent.UPGRADE_TIMELOCK) {\\n            newImplementation = setAddress;\\n            emit NewImplementationUpdate(setAddress);\\n        } else {\\n            revert(\\\"Unknown action\\\");\\n        }\\n    }\\n\\n\\n    /**\\n     * @dev Calling in modifier onlyAgent (see TimelockControllerUpgradeable)\\n     * Checks permissions for executing methods:\\n     * - schedule\\n     * - scheduleBatch\\n     */\\n\\n    function _onlyAgent() override public {\\n        require(msg.sender == ovnAgent, \\\"only ovnAgent\\\");\\n    }\\n\\n\\n   /**\\n     * @dev Calling in modifier onlyAgentMembers (see TimelockControllerUpgradeable)\\n     * Checks permissions for executing methods:\\n     * - cancel\\n     * - execute\\n     * - executeBatch\\n     *\\n     * Allow calling methods only ovnAgent or members of ovnAgent\\n     */\\n\\n    function _onlyAgentMembers() override public {\\n        bool isAllow = msg.sender == ovnAgent;\\n\\n        if(!isAllow){\\n\\n            address[] memory members = IGnosisSafe(ovnAgent).getOwners();\\n            for (uint256 i = 0; i < members.length; i++) {\\n                if(members[i] == msg.sender){\\n                    isAllow = true;\\n                    break;\\n                }\\n            }\\n        }\\n        require(isAllow, \\\"only ovnAgent or ovnAgentMember\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0c0fcfd8a1d9535f45bf01b039bb5e4027a8b0669ce02256338bcd5816dc8a4d\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\ninterface IGnosisSafe {\\n\\n    function getOwners() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xe66f448e5ebd9a8f4cc10643a26b18042886ab8a1e5b4ce2857e20723ae504a6\",\"license\":\"MIT\"},\"contracts/openzeppelin/TimelockControllerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/TimelockController.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which acts as a timelocked controller. When set as the\\n * owner of an `Ownable` smart contract, it enforces a timelock on all\\n * `onlyOwner` maintenance operations. This gives time for users of the\\n * controlled contract to exit before a potentially dangerous maintenance\\n * operation is applied.\\n *\\n * By default, this contract is self administered, meaning administration tasks\\n * have to go through the timelock process. The proposer (resp executor) role\\n * is in charge of proposing (resp executing) operations. A common use case is\\n * to position this {TimelockController} as the owner of a smart contract, with\\n * a multisig or a DAO as the sole proposer.\\n *\\n * _Available since v3.3._\\n */\\nabstract contract TimelockControllerUpgradeable is  IERC721ReceiverUpgradeable, IERC1155ReceiverUpgradeable {\\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\\n\\n    mapping(bytes32 => uint256) private _timestamps;\\n    uint256 private _minDelay;\\n\\n    /**\\n     * @dev Emitted when a call is scheduled as part of operation `id`.\\n     */\\n    event CallScheduled(\\n        bytes32 indexed id,\\n        uint256 indexed index,\\n        address target,\\n        uint256 value,\\n        bytes data,\\n        bytes32 predecessor,\\n        uint256 delay\\n    );\\n\\n    /**\\n     * @dev Emitted when a call is performed as part of operation `id`.\\n     */\\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\\n\\n    /**\\n     * @dev Emitted when new proposal is scheduled with non-zero salt.\\n     */\\n    event CallSalt(bytes32 indexed id, bytes32 salt);\\n\\n    /**\\n     * @dev Emitted when operation `id` is cancelled.\\n     */\\n    event Cancelled(bytes32 indexed id);\\n\\n    /**\\n     * @dev Emitted when the minimum delay for future operations is modified.\\n     */\\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\\n\\n\\n\\n    modifier onlyAgent(){\\n        _onlyAgent();\\n        _;\\n    }\\n\\n\\n    modifier onlyAgentMembers(){\\n        _onlyAgentMembers();\\n        _;\\n    }\\n\\n    function _onlyAgentMembers() public virtual;\\n    function _onlyAgent() public virtual;\\n\\n    /**\\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev Returns whether an id correspond to a registered operation. This\\n     * includes both Pending, Ready and Done operations.\\n     */\\n    function isOperation(bytes32 id) public view virtual returns (bool) {\\n        return getTimestamp(id) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is pending or not. Note that a \\\"pending\\\" operation may also be \\\"ready\\\".\\n     */\\n    function isOperationPending(bytes32 id) public view virtual returns (bool) {\\n        return getTimestamp(id) > _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is ready for execution. Note that a \\\"ready\\\" operation is also \\\"pending\\\".\\n     */\\n    function isOperationReady(bytes32 id) public view virtual returns (bool) {\\n        uint256 timestamp = getTimestamp(id);\\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns whether an operation is done or not.\\n     */\\n    function isOperationDone(bytes32 id) public view virtual returns (bool) {\\n        return getTimestamp(id) == _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Returns the timestamp at which an operation becomes ready (0 for\\n     * unset operations, 1 for done operations).\\n     */\\n    function getTimestamp(bytes32 id) public view virtual returns (uint256) {\\n        return _timestamps[id];\\n    }\\n\\n    /**\\n     * @dev Returns the minimum delay for an operation to become valid.\\n     *\\n     * This value can be changed by executing an operation that calls `updateDelay`.\\n     */\\n    function getMinDelay() public view virtual returns (uint256) {\\n        return _minDelay;\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a single\\n     * transaction.\\n     */\\n    function hashOperation(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32) {\\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Returns the identifier of an operation containing a batch of\\n     * transactions.\\n     */\\n    function hashOperationBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public pure virtual returns (bytes32) {\\n        return keccak256(abi.encode(targets, values, payloads, predecessor, salt));\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a single transaction.\\n     *\\n     * Emits {CallSalt} if salt is nonzero, and {CallScheduled}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function schedule(\\n        address target,\\n        uint256 value,\\n        bytes calldata data,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyAgent {\\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\\n        _schedule(id, delay);\\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\\n        if (salt != bytes32(0)) {\\n            emit CallSalt(id, salt);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation containing a batch of transactions.\\n     *\\n     * Emits {CallSalt} if salt is nonzero, and one {CallScheduled} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'proposer' role.\\n     */\\n    function scheduleBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt,\\n        uint256 delay\\n    ) public virtual onlyAgent {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n        _schedule(id, delay);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            emit CallScheduled(id, i, targets[i], values[i], payloads[i], predecessor, delay);\\n        }\\n        if (salt != bytes32(0)) {\\n            emit CallSalt(id, salt);\\n        }\\n    }\\n\\n    /**\\n     * @dev Schedule an operation that is to become valid after a given delay.\\n     */\\n    function _schedule(bytes32 id, uint256 delay) private {\\n        require(!isOperation(id), \\\"TimelockController: operation already scheduled\\\");\\n        require(delay >= getMinDelay(), \\\"TimelockController: insufficient delay\\\");\\n        _timestamps[id] = block.timestamp + delay;\\n    }\\n\\n    /**\\n     * @dev Cancel an operation.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'canceller' role.\\n     */\\n    function cancel(bytes32 id) public virtual onlyAgentMembers {\\n        require(isOperationPending(id), \\\"TimelockController: operation cannot be cancelled\\\");\\n        delete _timestamps[id];\\n\\n        emit Cancelled(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a single transaction.\\n     *\\n     * Emits a {CallExecuted} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes calldata payload,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyAgentMembers {\\n        bytes32 id = hashOperation(target, value, payload, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        _execute(target, value, payload);\\n        emit CallExecuted(id, 0, target, value, payload);\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an (ready) operation containing a batch of transactions.\\n     *\\n     * Emits one {CallExecuted} event per transaction in the batch.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the 'executor' role.\\n     */\\n    // This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\\n    // thus any modifications to the operation during reentrancy should be caught.\\n    // slither-disable-next-line reentrancy-eth\\n    function executeBatch(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata payloads,\\n        bytes32 predecessor,\\n        bytes32 salt\\n    ) public payable virtual onlyAgentMembers {\\n        require(targets.length == values.length, \\\"TimelockController: length mismatch\\\");\\n        require(targets.length == payloads.length, \\\"TimelockController: length mismatch\\\");\\n\\n        bytes32 id = hashOperationBatch(targets, values, payloads, predecessor, salt);\\n\\n        _beforeCall(id, predecessor);\\n        for (uint256 i = 0; i < targets.length; ++i) {\\n            address target = targets[i];\\n            uint256 value = values[i];\\n            bytes calldata payload = payloads[i];\\n            _execute(target, value, payload);\\n            emit CallExecuted(id, i, target, value, payload);\\n        }\\n        _afterCall(id);\\n    }\\n\\n    /**\\n     * @dev Execute an operation's call.\\n     */\\n    function _execute(address target, uint256 value, bytes calldata data) internal virtual {\\n        (bool success, ) = target.call{value: value}(data);\\n        require(success, \\\"TimelockController: underlying transaction reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Checks before execution of an operation's calls.\\n     */\\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \\\"TimelockController: missing dependency\\\");\\n    }\\n\\n    /**\\n     * @dev Checks after execution of an operation's calls.\\n     */\\n    function _afterCall(bytes32 id) private {\\n        require(isOperationReady(id), \\\"TimelockController: operation is not ready\\\");\\n        _timestamps[id] = _DONE_TIMESTAMP;\\n    }\\n\\n    /**\\n     * @dev Changes the minimum timelock duration for future operations.\\n     *\\n     * Emits a {MinDelayChange} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\\n     */\\n    function updateDelay(uint256 newDelay) external virtual {\\n        require(msg.sender == address(this), \\\"TimelockController: caller must be timelock\\\");\\n        emit MinDelayChange(_minDelay, newDelay);\\n        _minDelay = newDelay;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155Received}.\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155Receiver-onERC1155BatchReceived}.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xa06fd28ef1ded07353be8cf6ec9288786decf5530d716b2f3c323a5032c5c598\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b506200002362000029565b620000ea565b600054610100900460ff1615620000965760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e8576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805160601c61307462000125600039600081816107f90152818161084201528181610b4301528181610b830152610c1601526130746000f3fe6080604052600436106101f25760003560e01c806364d623531161010d578063adb3ce92116100a0578063d45c44351161006f578063d45c4435146105c8578063e38335e5146105f5578063f23a6e6114610608578063f27a0c9214610634578063fd8163e51461064957600080fd5b8063adb3ce921461053c578063b1c5f4271461055c578063bc197c811461057c578063c4d252f5146105a857600080fd5b806387968bc4116100dc57806387968bc4146104c55780638b677b03146104da5780638f2a0bb0146104fa57806390ef0bc71461051a57600080fd5b806364d623531461044657806365e8e4f4146104665780638065657f146104865780638419b435146104a657600080fd5b806331d50750116101855780634f1ef286116101545780634f1ef286146103db57806352d1902d146103ee578063584b153e14610411578063616ec3a21461043157600080fd5b806331d507501461035b578063334844551461037b5780633659cfe61461039b57806349160658146103bb57600080fd5b806313bc9f20116101c157806313bc9f20146102b15780631485227c146102d1578063150b7a02146102f15780632ab0f5291461032a57600080fd5b806301d5062a146101fe57806301ffc9a714610220578063116191b614610266578063134008d31461029e57600080fd5b366101f957005b600080fd5b34801561020a57600080fd5b5061021e610219366004612218565b610669565b005b34801561022c57600080fd5b5061025161023b36600461228e565b6001600160e01b031916630271189760e51b1490565b60405190151581526020015b60405180910390f35b34801561027257600080fd5b50609a54610286906001600160a01b031681565b6040516001600160a01b03909116815260200161025d565b61021e6102ac3660046122b8565b61071c565b3480156102bd57600080fd5b506102516102cc366004612325565b61079e565b3480156102dd57600080fd5b50609754610286906001600160a01b031681565b3480156102fd57600080fd5b5061031161030c3660046123fb565b6107c4565b6040516001600160e01b0319909116815260200161025d565b34801561033657600080fd5b50610251610345366004612325565b6000908152600160208190526040909120541490565b34801561036757600080fd5b50610251610376366004612325565b6107d5565b34801561038757600080fd5b50609854610286906001600160a01b031681565b3480156103a757600080fd5b5061021e6103b6366004612466565b6107ee565b3480156103c757600080fd5b5061021e6103d6366004612483565b6108d7565b61021e6103e9366004612526565b610b38565b3480156103fa57600080fd5b50610403610c09565b60405190815260200161025d565b34801561041d57600080fd5b5061025161042c366004612325565b610cbc565b34801561043d57600080fd5b5061021e610cd2565b34801561045257600080fd5b5061021e610461366004612325565b610d1e565b34801561047257600080fd5b5061021e610481366004612575565b610dc2565b34801561049257600080fd5b506104036104a13660046122b8565b611032565b3480156104b257600080fd5b50609a546001600160a01b031615610251565b3480156104d157600080fd5b5061021e611071565b3480156104e657600080fd5b50609b54610286906001600160a01b031681565b34801561050657600080fd5b5061021e610515366004612635565b6111b0565b34801561052657600080fd5b5061052f611320565b60405161025d9190612712565b34801561054857600080fd5b5061021e610557366004612466565b6113ae565b34801561056857600080fd5b50610403610577366004612745565b61142f565b34801561058857600080fd5b5061031161059736600461287b565b63bc197c8160e01b95945050505050565b3480156105b457600080fd5b5061021e6105c3366004612325565b611474565b3480156105d457600080fd5b506104036105e3366004612325565b60009081526001602052604090205490565b61021e610603366004612745565b611526565b34801561061457600080fd5b50610311610623366004612928565b63f23a6e6160e01b95945050505050565b34801561064057600080fd5b50600254610403565b34801561065557600080fd5b5061021e610664366004612466565b61167d565b610671610cd2565b6000610681888888888888611032565b905061068d81836116fe565b6000817f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8a8a8a8a8a896040516106c9969594939291906129b9565b60405180910390a3821561071257807f20fda5fd27a1ea7bf5b9567f143ac5470bb059374a27e8f67cb44f946f6d03878460405161070991815260200190565b60405180910390a25b5050505050505050565b610724611071565b6000610734878787878787611032565b905061074081846117ed565b61074c87878787611889565b6000817fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b588989898960405161078494939291906129f6565b60405180910390a361079581611955565b50505050505050565b6000818152600160205260408120546001811180156107bd5750428111155b9392505050565b630a85bd0160e11b5b949350505050565b60008181526001602052604081205481905b1192915050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108405760405162461bcd60e51b815260040161083790612a1e565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610889600080516020612ff8833981519152546001600160a01b031690565b6001600160a01b0316146108af5760405162461bcd60e51b815260040161083790612a6a565b6108b88161198e565b604080516000808252602082019092526108d491839190611a23565b50565b609a546001600160a01b03166109215760405162461bcd60e51b815260206004820152600f60248201526e3737ba1036b7ba3432b921b430b4b760891b6044820152606401610837565b609a546001600160a01b0316331461096a5760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c79206761746577617960a01b6044820152606401610837565b6000828260405161097c929190612ab6565b604051908190038120609a54635f6970c360e01b83529092506001600160a01b031690635f6970c3906109bd908b908b908b908b908b908990600401612ac6565b602060405180830381600087803b1580156109d757600080fd5b505af11580156109eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0f9190612b07565b610a2c57604051631403112d60e21b815260040160405180910390fd5b6000610a6d86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ba292505050565b6098549091506001600160a01b03808316911614610a9d5760405162461bcd60e51b815260040161083790612b29565b6099604051610aac9190612b91565b60405180910390208888604051610ac4929190612ab6565b604051809103902014610b0e5760405162461bcd60e51b81526020600482015260126024820152711bdb9b1e481b5bdd1a195c90da185a5b925960721b6044820152606401610837565b600080610b1d85870187612c2d565b91509150610b2b8282611d21565b5050505050505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b815760405162461bcd60e51b815260040161083790612a1e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bca600080516020612ff8833981519152546001600160a01b031690565b6001600160a01b031614610bf05760405162461bcd60e51b815260040161083790612a6a565b610bf98261198e565b610c0582826001611a23565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ca95760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610837565b50600080516020612ff883398151915290565b60008181526001602081905260408220546107e7565b6097546001600160a01b03163314610d1c5760405162461bcd60e51b815260206004820152600d60248201526c1bdb9b1e481bdd9b9059d95b9d609a1b6044820152606401610837565b565b333014610d815760405162461bcd60e51b815260206004820152602b60248201527f54696d656c6f636b436f6e74726f6c6c65723a2063616c6c6572206d7573742060448201526a62652074696d656c6f636b60a81b6064820152608401610837565b60025460408051918252602082018390527f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5910160405180910390a1600255565b600054610100900460ff1615808015610de25750600054600160ff909116105b80610dfc5750303b158015610dfc575060005460ff166001145b610e5f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610837565b6000805460ff191660011790558015610e82576000805461ff0019166101001790555b6001600160a01b038416610ed15760405162461bcd60e51b81526020600482015260166024820152756d6f7468657254696d656c6f636b206973207a65726f60501b6044820152606401610837565b6001600160a01b038316610f1a5760405162461bcd60e51b815260206004820152601060248201526f6f766e4167656e74206973207a65726f60801b6044820152606401610837565b8151610f685760405162461bcd60e51b815260206004820152601760248201527f5f6d6f74686572436861696e496420697320656d7074790000000000000000006044820152606401610837565b6001600160a01b03851615610f9357609a80546001600160a01b0319166001600160a01b0387161790555b609880546001600160a01b0319166001600160a01b0386161790558151610fc1906099906020850190612122565b50609780546001600160a01b0319166001600160a01b038516179055610fe5611e7d565b801561102b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600086868686868660405160200161104f969594939291906129b9565b6040516020818303038152906040528051906020012090509695505050505050565b6097546001600160a01b0316331480611163576097546040805163a0e67e2b60e01b815290516000926001600160a01b03169163a0e67e2b9160048083019286929190829003018186803b1580156110c857600080fd5b505afa1580156110dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111049190810190612c6a565b905060005b815181101561116057336001600160a01b031682828151811061112e5761112e612d03565b60200260200101516001600160a01b0316141561114e5760019250611160565b8061115881612d2f565b915050611109565b50505b806108d45760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c79206f766e4167656e74206f72206f766e4167656e744d656d626572006044820152606401610837565b6111b8610cd2565b8786146111d75760405162461bcd60e51b815260040161083790612d4a565b8784146111f65760405162461bcd60e51b815260040161083790612d4a565b60006112088a8a8a8a8a8a8a8a61142f565b905061121481836116fe565b60005b898110156112d25780827f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8d8d8581811061125457611254612d03565b90506020020160208101906112699190612466565b8c8c8681811061127b5761127b612d03565b905060200201358b8b8781811061129457611294612d03565b90506020028101906112a69190612d8d565b8b8a6040516112ba969594939291906129b9565b60405180910390a36112cb81612d2f565b9050611217565b50821561131457807f20fda5fd27a1ea7bf5b9567f143ac5470bb059374a27e8f67cb44f946f6d03878460405161130b91815260200190565b60405180910390a25b50505050505050505050565b6099805461132d90612b56565b80601f016020809104026020016040519081016040528092919081815260200182805461135990612b56565b80156113a65780601f1061137b576101008083540402835291602001916113a6565b820191906000526020600020905b81548152906001019060200180831161138957829003601f168201915b505050505081565b609a546001600160a01b0316156113fa5760405162461bcd60e51b815260206004820152601060248201526f37b7363c9036b7ba3432b921b430b4b760811b6044820152606401610837565b6098546001600160a01b031633146114245760405162461bcd60e51b815260040161083790612b29565b6108d4600182611d21565b60008888888888888888604051602001611450989796959493929190612e63565b60405160208183030381529060405280519060200120905098975050505050505050565b61147c611071565b61148581610cbc565b6114eb5760405162461bcd60e51b815260206004820152603160248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e2063616044820152701b9b9bdd0818994818d85b98d95b1b1959607a1b6064820152608401610837565b6000818152600160205260408082208290555182917fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb7091a250565b61152e611071565b86851461154d5760405162461bcd60e51b815260040161083790612d4a565b86831461156c5760405162461bcd60e51b815260040161083790612d4a565b600061157e898989898989898961142f565b905061158a81846117ed565b60005b888110156116685760008a8a838181106115a9576115a9612d03565b90506020020160208101906115be9190612466565b905060008989848181106115d4576115d4612d03565b9050602002013590503660008989868181106115f2576115f2612d03565b90506020028101906116049190612d8d565b9150915061161484848484611889565b84867fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b588686868660405161164b94939291906129f6565b60405180910390a3505050508061166190612d2f565b905061158d565b5061167281611955565b505050505050505050565b609a546001600160a01b0316156116c95760405162461bcd60e51b815260206004820152601060248201526f37b7363c9036b7ba3432b921b430b4b760811b6044820152606401610837565b6098546001600160a01b031633146116f35760405162461bcd60e51b815260040161083790612b29565b6108d4600082611d21565b611707826107d5565b1561176c5760405162461bcd60e51b815260206004820152602f60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20616c60448201526e1c9958591e481cd8da19591d5b1959608a1b6064820152608401610837565b6002548110156117cd5760405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a20696e73756666696369656e746044820152652064656c617960d01b6064820152608401610837565b6117d78142612f10565b6000928352600160205260409092209190915550565b6117f68261079e565b6118125760405162461bcd60e51b815260040161083790612f28565b80158061182e5750600081815260016020819052604090912054145b610c055760405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a206d697373696e6720646570656044820152656e64656e637960d01b6064820152608401610837565b6000846001600160a01b03168484846040516118a6929190612ab6565b60006040518083038185875af1925050503d80600081146118e3576040519150601f19603f3d011682016040523d82523d6000602084013e6118e8565b606091505b505090508061102b5760405162461bcd60e51b815260206004820152603360248201527f54696d656c6f636b436f6e74726f6c6c65723a20756e6465726c79696e6720746044820152721c985b9cd858dd1a5bdb881c995d995c9d1959606a1b6064820152608401610837565b61195e8161079e565b61197a5760405162461bcd60e51b815260040161083790612f28565b600090815260016020819052604090912055565b611996611071565b609b546001600160a01b03166119c657609b80546001600160a01b0383166001600160a01b031990911617905550565b609b546001600160a01b038281169116146108d45760405162461bcd60e51b815260206004820152601c60248201527f4e657720696d706c656d656e746174696f6e206e6f7420657175616c000000006044820152606401610837565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a5b57611a5683611ee8565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a9457600080fd5b505afa925050508015611ac4575060408051601f3d908101601f19168201909252611ac191810190612f72565b60015b611b275760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610837565b600080516020612ff88339815191528114611b965760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610837565b50611a56838383611f84565b6000808290506000808251602a141580611be2575082600081518110611bca57611bca612d03565b6020910101516001600160f81b031916600360fc1b14155b80611c13575082600181518110611bfb57611bfb612d03565b6020910101516001600160f81b031916600f60fb1b14155b15611c3157604051636fa478cf60e11b815260040160405180910390fd5b60025b602a811015611d1757838181518110611c4f57611c4f612d03565b016020015160f81c915060618210801590611c6e575060668260ff1611155b15611c8557611c7e605783612f8b565b9150611cee565b60418260ff1610158015611c9d575060468260ff1611155b15611cad57611c7e603783612f8b565b60308260ff1610158015611cc5575060398260ff1611155b15611cd557611c7e603083612f8b565b604051636fa478cf60e11b815260040160405180910390fd5b6002611cfb826029612fae565b60ff8416911b1b9290921791611d1081612d2f565b9050611c34565b5090949350505050565b6001600160a01b038116611d6c5760405162461bcd60e51b815260206004820152601260248201527173657441646472657373206973207a65726f60701b6044820152606401610837565b6000826001811115611d8057611d80612fc5565b1415611ddc57609780546001600160a01b0319166001600160a01b0383169081179091556040519081527f3e225b458c4d2a88650a05f1633b5f87336c0c67a43ea4338c3240fd2d762427906020015b60405180910390a15050565b6001826001811115611df057611df0612fc5565b1415611e4457609b80546001600160a01b0319166001600160a01b0383169081179091556040519081527f20d3b0c7398674ab7b0dfb6f79e18990b5d29b056f2e59ed40aa40d2813c34f390602001611dd0565b60405162461bcd60e51b815260206004820152600e60248201526d2ab735b737bbb71030b1ba34b7b760911b6044820152606401610837565b600054610100900460ff16610d1c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610837565b6001600160a01b0381163b611f555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610837565b600080516020612ff883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611f8d83611faf565b600082511180611f9a5750805b15611a5657611fa98383611fef565b50505050565b611fb881611ee8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606107bd8383604051806060016040528060278152602001613018602791396060600080856001600160a01b03168560405161202c9190612fdb565b600060405180830381855af49150503d8060008114612067576040519150601f19603f3d011682016040523d82523d6000602084013e61206c565b606091505b509150915061207d86838387612087565b9695505050505050565b606083156120f35782516120ec576001600160a01b0385163b6120ec5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610837565b50816107cd565b6107cd83838151156121085781518083602001fd5b8060405162461bcd60e51b81526004016108379190612712565b82805461212e90612b56565b90600052602060002090601f0160209004810192826121505760008555612196565b82601f1061216957805160ff1916838001178555612196565b82800160010185558215612196579182015b8281111561219657825182559160200191906001019061217b565b506121a29291506121a6565b5090565b5b808211156121a257600081556001016121a7565b6001600160a01b03811681146108d457600080fd5b60008083601f8401126121e257600080fd5b5081356001600160401b038111156121f957600080fd5b60208301915083602082850101111561221157600080fd5b9250929050565b600080600080600080600060c0888a03121561223357600080fd5b873561223e816121bb565b96506020880135955060408801356001600160401b0381111561226057600080fd5b61226c8a828b016121d0565b989b979a50986060810135976080820135975060a09091013595509350505050565b6000602082840312156122a057600080fd5b81356001600160e01b0319811681146107bd57600080fd5b60008060008060008060a087890312156122d157600080fd5b86356122dc816121bb565b95506020870135945060408701356001600160401b038111156122fe57600080fd5b61230a89828a016121d0565b979a9699509760608101359660809091013595509350505050565b60006020828403121561233757600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561237c5761237c61233e565b604052919050565b60006001600160401b0383111561239d5761239d61233e565b6123b0601f8401601f1916602001612354565b90508281528383830111156123c457600080fd5b828260208301376000602084830101529392505050565b600082601f8301126123ec57600080fd5b6107bd83833560208501612384565b6000806000806080858703121561241157600080fd5b843561241c816121bb565b9350602085013561242c816121bb565b92506040850135915060608501356001600160401b0381111561244e57600080fd5b61245a878288016123db565b91505092959194509250565b60006020828403121561247857600080fd5b81356107bd816121bb565b60008060008060008060006080888a03121561249e57600080fd5b8735965060208801356001600160401b03808211156124bc57600080fd5b6124c88b838c016121d0565b909850965060408a01359150808211156124e157600080fd5b6124ed8b838c016121d0565b909650945060608a013591508082111561250657600080fd5b506125138a828b016121d0565b989b979a50959850939692959293505050565b6000806040838503121561253957600080fd5b8235612544816121bb565b915060208301356001600160401b0381111561255f57600080fd5b61256b858286016123db565b9150509250929050565b6000806000806080858703121561258b57600080fd5b8435612596816121bb565b935060208501356125a6816121bb565b925060408501356125b6816121bb565b915060608501356001600160401b038111156125d157600080fd5b8501601f810187136125e257600080fd5b61245a87823560208401612384565b60008083601f84011261260357600080fd5b5081356001600160401b0381111561261a57600080fd5b6020830191508360208260051b850101111561221157600080fd5b600080600080600080600080600060c08a8c03121561265357600080fd5b89356001600160401b038082111561266a57600080fd5b6126768d838e016125f1565b909b50995060208c013591508082111561268f57600080fd5b61269b8d838e016125f1565b909950975060408c01359150808211156126b457600080fd5b506126c18c828d016125f1565b9a9d999c50979a969997986060880135976080810135975060a0013595509350505050565b60005b838110156127015781810151838201526020016126e9565b83811115611fa95750506000910152565b60208152600082518060208401526127318160408501602087016126e6565b601f01601f19169190910160400192915050565b60008060008060008060008060a0898b03121561276157600080fd5b88356001600160401b038082111561277857600080fd5b6127848c838d016125f1565b909a50985060208b013591508082111561279d57600080fd5b6127a98c838d016125f1565b909850965060408b01359150808211156127c257600080fd5b506127cf8b828c016125f1565b999c989b509699959896976060870135966080013595509350505050565b60006001600160401b038211156128065761280661233e565b5060051b60200190565b600082601f83011261282157600080fd5b81356020612836612831836127ed565b612354565b82815260059290921b8401810191818101908684111561285557600080fd5b8286015b848110156128705780358352918301918301612859565b509695505050505050565b600080600080600060a0868803121561289357600080fd5b853561289e816121bb565b945060208601356128ae816121bb565b935060408601356001600160401b03808211156128ca57600080fd5b6128d689838a01612810565b945060608801359150808211156128ec57600080fd5b6128f889838a01612810565b9350608088013591508082111561290e57600080fd5b5061291b888289016123db565b9150509295509295909350565b600080600080600060a0868803121561294057600080fd5b853561294b816121bb565b9450602086013561295b816121bb565b9350604086013592506060860135915060808601356001600160401b0381111561298457600080fd5b61291b888289016123db565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b038716815285602082015260a0604082015260006129e160a083018688612990565b60608301949094525060800152949350505050565b60018060a01b038516815283602082015260606040820152600061207d606083018486612990565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b8183823760009101908152919050565b868152608060208201526000612ae0608083018789612990565b8281036040840152612af3818688612990565b915050826060830152979650505050505050565b600060208284031215612b1957600080fd5b815180151581146107bd57600080fd5b6020808252601390820152726f6e6c79206d6f7468657254696d656c6f636b60681b604082015260600190565b600181811c90821680612b6a57607f821691505b60208210811415612b8b57634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c915080831680612bad57607f831692505b6020808410821415612bcd57634e487b7160e01b86526022600452602486fd5b818015612be15760018114612bf257612c1f565b60ff19861689528489019650612c1f565b60008a81526020902060005b86811015612c175781548b820152908501908301612bfe565b505084890196505b509498975050505050505050565b60008060408385031215612c4057600080fd5b823560028110612c4f57600080fd5b91506020830135612c5f816121bb565b809150509250929050565b60006020808385031215612c7d57600080fd5b82516001600160401b03811115612c9357600080fd5b8301601f81018513612ca457600080fd5b8051612cb2612831826127ed565b81815260059190911b82018301908381019087831115612cd157600080fd5b928401925b82841015612cf8578351612ce9816121bb565b82529284019290840190612cd6565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d4357612d43612d19565b5060010190565b60208082526023908201527f54696d656c6f636b436f6e74726f6c6c65723a206c656e677468206d69736d616040820152620e8c6d60eb1b606082015260800190565b6000808335601e19843603018112612da457600080fd5b8301803591506001600160401b03821115612dbe57600080fd5b60200191503681900382131561221157600080fd5b81835260006020808501808196508560051b810191508460005b87811015612e565782840389528135601e19883603018112612e0e57600080fd5b870180356001600160401b03811115612e2657600080fd5b803603891315612e3557600080fd5b612e428682898501612990565b9a87019a9550505090840190600101612ded565b5091979650505050505050565b60a0808252810188905260008960c08301825b8b811015612ea6578235612e89816121bb565b6001600160a01b0316825260209283019290910190600101612e76565b5083810360208501528881526001600160fb1b03891115612ec657600080fd5b8860051b9150818a602083013781810191505060208101600081526020848303016040850152612ef781888a612dd3565b6060850196909652505050608001529695505050505050565b60008219821115612f2357612f23612d19565b500190565b6020808252602a908201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e206973604082015269206e6f7420726561647960b01b606082015260800190565b600060208284031215612f8457600080fd5b5051919050565b600060ff821660ff841680821015612fa557612fa5612d19565b90039392505050565b600082821015612fc057612fc0612d19565b500390565b634e487b7160e01b600052602160045260246000fd5b60008251612fed8184602087016126e6565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212206a0ceb93fe88d0361d73799564c300f3111c24c977a897f857df848f5aa24d0b64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106101f25760003560e01c806364d623531161010d578063adb3ce92116100a0578063d45c44351161006f578063d45c4435146105c8578063e38335e5146105f5578063f23a6e6114610608578063f27a0c9214610634578063fd8163e51461064957600080fd5b8063adb3ce921461053c578063b1c5f4271461055c578063bc197c811461057c578063c4d252f5146105a857600080fd5b806387968bc4116100dc57806387968bc4146104c55780638b677b03146104da5780638f2a0bb0146104fa57806390ef0bc71461051a57600080fd5b806364d623531461044657806365e8e4f4146104665780638065657f146104865780638419b435146104a657600080fd5b806331d50750116101855780634f1ef286116101545780634f1ef286146103db57806352d1902d146103ee578063584b153e14610411578063616ec3a21461043157600080fd5b806331d507501461035b578063334844551461037b5780633659cfe61461039b57806349160658146103bb57600080fd5b806313bc9f20116101c157806313bc9f20146102b15780631485227c146102d1578063150b7a02146102f15780632ab0f5291461032a57600080fd5b806301d5062a146101fe57806301ffc9a714610220578063116191b614610266578063134008d31461029e57600080fd5b366101f957005b600080fd5b34801561020a57600080fd5b5061021e610219366004612218565b610669565b005b34801561022c57600080fd5b5061025161023b36600461228e565b6001600160e01b031916630271189760e51b1490565b60405190151581526020015b60405180910390f35b34801561027257600080fd5b50609a54610286906001600160a01b031681565b6040516001600160a01b03909116815260200161025d565b61021e6102ac3660046122b8565b61071c565b3480156102bd57600080fd5b506102516102cc366004612325565b61079e565b3480156102dd57600080fd5b50609754610286906001600160a01b031681565b3480156102fd57600080fd5b5061031161030c3660046123fb565b6107c4565b6040516001600160e01b0319909116815260200161025d565b34801561033657600080fd5b50610251610345366004612325565b6000908152600160208190526040909120541490565b34801561036757600080fd5b50610251610376366004612325565b6107d5565b34801561038757600080fd5b50609854610286906001600160a01b031681565b3480156103a757600080fd5b5061021e6103b6366004612466565b6107ee565b3480156103c757600080fd5b5061021e6103d6366004612483565b6108d7565b61021e6103e9366004612526565b610b38565b3480156103fa57600080fd5b50610403610c09565b60405190815260200161025d565b34801561041d57600080fd5b5061025161042c366004612325565b610cbc565b34801561043d57600080fd5b5061021e610cd2565b34801561045257600080fd5b5061021e610461366004612325565b610d1e565b34801561047257600080fd5b5061021e610481366004612575565b610dc2565b34801561049257600080fd5b506104036104a13660046122b8565b611032565b3480156104b257600080fd5b50609a546001600160a01b031615610251565b3480156104d157600080fd5b5061021e611071565b3480156104e657600080fd5b50609b54610286906001600160a01b031681565b34801561050657600080fd5b5061021e610515366004612635565b6111b0565b34801561052657600080fd5b5061052f611320565b60405161025d9190612712565b34801561054857600080fd5b5061021e610557366004612466565b6113ae565b34801561056857600080fd5b50610403610577366004612745565b61142f565b34801561058857600080fd5b5061031161059736600461287b565b63bc197c8160e01b95945050505050565b3480156105b457600080fd5b5061021e6105c3366004612325565b611474565b3480156105d457600080fd5b506104036105e3366004612325565b60009081526001602052604090205490565b61021e610603366004612745565b611526565b34801561061457600080fd5b50610311610623366004612928565b63f23a6e6160e01b95945050505050565b34801561064057600080fd5b50600254610403565b34801561065557600080fd5b5061021e610664366004612466565b61167d565b610671610cd2565b6000610681888888888888611032565b905061068d81836116fe565b6000817f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8a8a8a8a8a896040516106c9969594939291906129b9565b60405180910390a3821561071257807f20fda5fd27a1ea7bf5b9567f143ac5470bb059374a27e8f67cb44f946f6d03878460405161070991815260200190565b60405180910390a25b5050505050505050565b610724611071565b6000610734878787878787611032565b905061074081846117ed565b61074c87878787611889565b6000817fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b588989898960405161078494939291906129f6565b60405180910390a361079581611955565b50505050505050565b6000818152600160205260408120546001811180156107bd5750428111155b9392505050565b630a85bd0160e11b5b949350505050565b60008181526001602052604081205481905b1192915050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108405760405162461bcd60e51b815260040161083790612a1e565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610889600080516020612ff8833981519152546001600160a01b031690565b6001600160a01b0316146108af5760405162461bcd60e51b815260040161083790612a6a565b6108b88161198e565b604080516000808252602082019092526108d491839190611a23565b50565b609a546001600160a01b03166109215760405162461bcd60e51b815260206004820152600f60248201526e3737ba1036b7ba3432b921b430b4b760891b6044820152606401610837565b609a546001600160a01b0316331461096a5760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c79206761746577617960a01b6044820152606401610837565b6000828260405161097c929190612ab6565b604051908190038120609a54635f6970c360e01b83529092506001600160a01b031690635f6970c3906109bd908b908b908b908b908b908990600401612ac6565b602060405180830381600087803b1580156109d757600080fd5b505af11580156109eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0f9190612b07565b610a2c57604051631403112d60e21b815260040160405180910390fd5b6000610a6d86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ba292505050565b6098549091506001600160a01b03808316911614610a9d5760405162461bcd60e51b815260040161083790612b29565b6099604051610aac9190612b91565b60405180910390208888604051610ac4929190612ab6565b604051809103902014610b0e5760405162461bcd60e51b81526020600482015260126024820152711bdb9b1e481b5bdd1a195c90da185a5b925960721b6044820152606401610837565b600080610b1d85870187612c2d565b91509150610b2b8282611d21565b5050505050505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b815760405162461bcd60e51b815260040161083790612a1e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bca600080516020612ff8833981519152546001600160a01b031690565b6001600160a01b031614610bf05760405162461bcd60e51b815260040161083790612a6a565b610bf98261198e565b610c0582826001611a23565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ca95760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610837565b50600080516020612ff883398151915290565b60008181526001602081905260408220546107e7565b6097546001600160a01b03163314610d1c5760405162461bcd60e51b815260206004820152600d60248201526c1bdb9b1e481bdd9b9059d95b9d609a1b6044820152606401610837565b565b333014610d815760405162461bcd60e51b815260206004820152602b60248201527f54696d656c6f636b436f6e74726f6c6c65723a2063616c6c6572206d7573742060448201526a62652074696d656c6f636b60a81b6064820152608401610837565b60025460408051918252602082018390527f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d5910160405180910390a1600255565b600054610100900460ff1615808015610de25750600054600160ff909116105b80610dfc5750303b158015610dfc575060005460ff166001145b610e5f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610837565b6000805460ff191660011790558015610e82576000805461ff0019166101001790555b6001600160a01b038416610ed15760405162461bcd60e51b81526020600482015260166024820152756d6f7468657254696d656c6f636b206973207a65726f60501b6044820152606401610837565b6001600160a01b038316610f1a5760405162461bcd60e51b815260206004820152601060248201526f6f766e4167656e74206973207a65726f60801b6044820152606401610837565b8151610f685760405162461bcd60e51b815260206004820152601760248201527f5f6d6f74686572436861696e496420697320656d7074790000000000000000006044820152606401610837565b6001600160a01b03851615610f9357609a80546001600160a01b0319166001600160a01b0387161790555b609880546001600160a01b0319166001600160a01b0386161790558151610fc1906099906020850190612122565b50609780546001600160a01b0319166001600160a01b038516179055610fe5611e7d565b801561102b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b600086868686868660405160200161104f969594939291906129b9565b6040516020818303038152906040528051906020012090509695505050505050565b6097546001600160a01b0316331480611163576097546040805163a0e67e2b60e01b815290516000926001600160a01b03169163a0e67e2b9160048083019286929190829003018186803b1580156110c857600080fd5b505afa1580156110dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111049190810190612c6a565b905060005b815181101561116057336001600160a01b031682828151811061112e5761112e612d03565b60200260200101516001600160a01b0316141561114e5760019250611160565b8061115881612d2f565b915050611109565b50505b806108d45760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c79206f766e4167656e74206f72206f766e4167656e744d656d626572006044820152606401610837565b6111b8610cd2565b8786146111d75760405162461bcd60e51b815260040161083790612d4a565b8784146111f65760405162461bcd60e51b815260040161083790612d4a565b60006112088a8a8a8a8a8a8a8a61142f565b905061121481836116fe565b60005b898110156112d25780827f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8d8d8581811061125457611254612d03565b90506020020160208101906112699190612466565b8c8c8681811061127b5761127b612d03565b905060200201358b8b8781811061129457611294612d03565b90506020028101906112a69190612d8d565b8b8a6040516112ba969594939291906129b9565b60405180910390a36112cb81612d2f565b9050611217565b50821561131457807f20fda5fd27a1ea7bf5b9567f143ac5470bb059374a27e8f67cb44f946f6d03878460405161130b91815260200190565b60405180910390a25b50505050505050505050565b6099805461132d90612b56565b80601f016020809104026020016040519081016040528092919081815260200182805461135990612b56565b80156113a65780601f1061137b576101008083540402835291602001916113a6565b820191906000526020600020905b81548152906001019060200180831161138957829003601f168201915b505050505081565b609a546001600160a01b0316156113fa5760405162461bcd60e51b815260206004820152601060248201526f37b7363c9036b7ba3432b921b430b4b760811b6044820152606401610837565b6098546001600160a01b031633146114245760405162461bcd60e51b815260040161083790612b29565b6108d4600182611d21565b60008888888888888888604051602001611450989796959493929190612e63565b60405160208183030381529060405280519060200120905098975050505050505050565b61147c611071565b61148581610cbc565b6114eb5760405162461bcd60e51b815260206004820152603160248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e2063616044820152701b9b9bdd0818994818d85b98d95b1b1959607a1b6064820152608401610837565b6000818152600160205260408082208290555182917fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb7091a250565b61152e611071565b86851461154d5760405162461bcd60e51b815260040161083790612d4a565b86831461156c5760405162461bcd60e51b815260040161083790612d4a565b600061157e898989898989898961142f565b905061158a81846117ed565b60005b888110156116685760008a8a838181106115a9576115a9612d03565b90506020020160208101906115be9190612466565b905060008989848181106115d4576115d4612d03565b9050602002013590503660008989868181106115f2576115f2612d03565b90506020028101906116049190612d8d565b9150915061161484848484611889565b84867fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b588686868660405161164b94939291906129f6565b60405180910390a3505050508061166190612d2f565b905061158d565b5061167281611955565b505050505050505050565b609a546001600160a01b0316156116c95760405162461bcd60e51b815260206004820152601060248201526f37b7363c9036b7ba3432b921b430b4b760811b6044820152606401610837565b6098546001600160a01b031633146116f35760405162461bcd60e51b815260040161083790612b29565b6108d4600082611d21565b611707826107d5565b1561176c5760405162461bcd60e51b815260206004820152602f60248201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e20616c60448201526e1c9958591e481cd8da19591d5b1959608a1b6064820152608401610837565b6002548110156117cd5760405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a20696e73756666696369656e746044820152652064656c617960d01b6064820152608401610837565b6117d78142612f10565b6000928352600160205260409092209190915550565b6117f68261079e565b6118125760405162461bcd60e51b815260040161083790612f28565b80158061182e5750600081815260016020819052604090912054145b610c055760405162461bcd60e51b815260206004820152602660248201527f54696d656c6f636b436f6e74726f6c6c65723a206d697373696e6720646570656044820152656e64656e637960d01b6064820152608401610837565b6000846001600160a01b03168484846040516118a6929190612ab6565b60006040518083038185875af1925050503d80600081146118e3576040519150601f19603f3d011682016040523d82523d6000602084013e6118e8565b606091505b505090508061102b5760405162461bcd60e51b815260206004820152603360248201527f54696d656c6f636b436f6e74726f6c6c65723a20756e6465726c79696e6720746044820152721c985b9cd858dd1a5bdb881c995d995c9d1959606a1b6064820152608401610837565b61195e8161079e565b61197a5760405162461bcd60e51b815260040161083790612f28565b600090815260016020819052604090912055565b611996611071565b609b546001600160a01b03166119c657609b80546001600160a01b0383166001600160a01b031990911617905550565b609b546001600160a01b038281169116146108d45760405162461bcd60e51b815260206004820152601c60248201527f4e657720696d706c656d656e746174696f6e206e6f7420657175616c000000006044820152606401610837565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a5b57611a5683611ee8565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a9457600080fd5b505afa925050508015611ac4575060408051601f3d908101601f19168201909252611ac191810190612f72565b60015b611b275760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610837565b600080516020612ff88339815191528114611b965760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610837565b50611a56838383611f84565b6000808290506000808251602a141580611be2575082600081518110611bca57611bca612d03565b6020910101516001600160f81b031916600360fc1b14155b80611c13575082600181518110611bfb57611bfb612d03565b6020910101516001600160f81b031916600f60fb1b14155b15611c3157604051636fa478cf60e11b815260040160405180910390fd5b60025b602a811015611d1757838181518110611c4f57611c4f612d03565b016020015160f81c915060618210801590611c6e575060668260ff1611155b15611c8557611c7e605783612f8b565b9150611cee565b60418260ff1610158015611c9d575060468260ff1611155b15611cad57611c7e603783612f8b565b60308260ff1610158015611cc5575060398260ff1611155b15611cd557611c7e603083612f8b565b604051636fa478cf60e11b815260040160405180910390fd5b6002611cfb826029612fae565b60ff8416911b1b9290921791611d1081612d2f565b9050611c34565b5090949350505050565b6001600160a01b038116611d6c5760405162461bcd60e51b815260206004820152601260248201527173657441646472657373206973207a65726f60701b6044820152606401610837565b6000826001811115611d8057611d80612fc5565b1415611ddc57609780546001600160a01b0319166001600160a01b0383169081179091556040519081527f3e225b458c4d2a88650a05f1633b5f87336c0c67a43ea4338c3240fd2d762427906020015b60405180910390a15050565b6001826001811115611df057611df0612fc5565b1415611e4457609b80546001600160a01b0319166001600160a01b0383169081179091556040519081527f20d3b0c7398674ab7b0dfb6f79e18990b5d29b056f2e59ed40aa40d2813c34f390602001611dd0565b60405162461bcd60e51b815260206004820152600e60248201526d2ab735b737bbb71030b1ba34b7b760911b6044820152606401610837565b600054610100900460ff16610d1c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610837565b6001600160a01b0381163b611f555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610837565b600080516020612ff883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611f8d83611faf565b600082511180611f9a5750805b15611a5657611fa98383611fef565b50505050565b611fb881611ee8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606107bd8383604051806060016040528060278152602001613018602791396060600080856001600160a01b03168560405161202c9190612fdb565b600060405180830381855af49150503d8060008114612067576040519150601f19603f3d011682016040523d82523d6000602084013e61206c565b606091505b509150915061207d86838387612087565b9695505050505050565b606083156120f35782516120ec576001600160a01b0385163b6120ec5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610837565b50816107cd565b6107cd83838151156121085781518083602001fd5b8060405162461bcd60e51b81526004016108379190612712565b82805461212e90612b56565b90600052602060002090601f0160209004810192826121505760008555612196565b82601f1061216957805160ff1916838001178555612196565b82800160010185558215612196579182015b8281111561219657825182559160200191906001019061217b565b506121a29291506121a6565b5090565b5b808211156121a257600081556001016121a7565b6001600160a01b03811681146108d457600080fd5b60008083601f8401126121e257600080fd5b5081356001600160401b038111156121f957600080fd5b60208301915083602082850101111561221157600080fd5b9250929050565b600080600080600080600060c0888a03121561223357600080fd5b873561223e816121bb565b96506020880135955060408801356001600160401b0381111561226057600080fd5b61226c8a828b016121d0565b989b979a50986060810135976080820135975060a09091013595509350505050565b6000602082840312156122a057600080fd5b81356001600160e01b0319811681146107bd57600080fd5b60008060008060008060a087890312156122d157600080fd5b86356122dc816121bb565b95506020870135945060408701356001600160401b038111156122fe57600080fd5b61230a89828a016121d0565b979a9699509760608101359660809091013595509350505050565b60006020828403121561233757600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561237c5761237c61233e565b604052919050565b60006001600160401b0383111561239d5761239d61233e565b6123b0601f8401601f1916602001612354565b90508281528383830111156123c457600080fd5b828260208301376000602084830101529392505050565b600082601f8301126123ec57600080fd5b6107bd83833560208501612384565b6000806000806080858703121561241157600080fd5b843561241c816121bb565b9350602085013561242c816121bb565b92506040850135915060608501356001600160401b0381111561244e57600080fd5b61245a878288016123db565b91505092959194509250565b60006020828403121561247857600080fd5b81356107bd816121bb565b60008060008060008060006080888a03121561249e57600080fd5b8735965060208801356001600160401b03808211156124bc57600080fd5b6124c88b838c016121d0565b909850965060408a01359150808211156124e157600080fd5b6124ed8b838c016121d0565b909650945060608a013591508082111561250657600080fd5b506125138a828b016121d0565b989b979a50959850939692959293505050565b6000806040838503121561253957600080fd5b8235612544816121bb565b915060208301356001600160401b0381111561255f57600080fd5b61256b858286016123db565b9150509250929050565b6000806000806080858703121561258b57600080fd5b8435612596816121bb565b935060208501356125a6816121bb565b925060408501356125b6816121bb565b915060608501356001600160401b038111156125d157600080fd5b8501601f810187136125e257600080fd5b61245a87823560208401612384565b60008083601f84011261260357600080fd5b5081356001600160401b0381111561261a57600080fd5b6020830191508360208260051b850101111561221157600080fd5b600080600080600080600080600060c08a8c03121561265357600080fd5b89356001600160401b038082111561266a57600080fd5b6126768d838e016125f1565b909b50995060208c013591508082111561268f57600080fd5b61269b8d838e016125f1565b909950975060408c01359150808211156126b457600080fd5b506126c18c828d016125f1565b9a9d999c50979a969997986060880135976080810135975060a0013595509350505050565b60005b838110156127015781810151838201526020016126e9565b83811115611fa95750506000910152565b60208152600082518060208401526127318160408501602087016126e6565b601f01601f19169190910160400192915050565b60008060008060008060008060a0898b03121561276157600080fd5b88356001600160401b038082111561277857600080fd5b6127848c838d016125f1565b909a50985060208b013591508082111561279d57600080fd5b6127a98c838d016125f1565b909850965060408b01359150808211156127c257600080fd5b506127cf8b828c016125f1565b999c989b509699959896976060870135966080013595509350505050565b60006001600160401b038211156128065761280661233e565b5060051b60200190565b600082601f83011261282157600080fd5b81356020612836612831836127ed565b612354565b82815260059290921b8401810191818101908684111561285557600080fd5b8286015b848110156128705780358352918301918301612859565b509695505050505050565b600080600080600060a0868803121561289357600080fd5b853561289e816121bb565b945060208601356128ae816121bb565b935060408601356001600160401b03808211156128ca57600080fd5b6128d689838a01612810565b945060608801359150808211156128ec57600080fd5b6128f889838a01612810565b9350608088013591508082111561290e57600080fd5b5061291b888289016123db565b9150509295509295909350565b600080600080600060a0868803121561294057600080fd5b853561294b816121bb565b9450602086013561295b816121bb565b9350604086013592506060860135915060808601356001600160401b0381111561298457600080fd5b61291b888289016123db565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b038716815285602082015260a0604082015260006129e160a083018688612990565b60608301949094525060800152949350505050565b60018060a01b038516815283602082015260606040820152600061207d606083018486612990565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b8183823760009101908152919050565b868152608060208201526000612ae0608083018789612990565b8281036040840152612af3818688612990565b915050826060830152979650505050505050565b600060208284031215612b1957600080fd5b815180151581146107bd57600080fd5b6020808252601390820152726f6e6c79206d6f7468657254696d656c6f636b60681b604082015260600190565b600181811c90821680612b6a57607f821691505b60208210811415612b8b57634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c915080831680612bad57607f831692505b6020808410821415612bcd57634e487b7160e01b86526022600452602486fd5b818015612be15760018114612bf257612c1f565b60ff19861689528489019650612c1f565b60008a81526020902060005b86811015612c175781548b820152908501908301612bfe565b505084890196505b509498975050505050505050565b60008060408385031215612c4057600080fd5b823560028110612c4f57600080fd5b91506020830135612c5f816121bb565b809150509250929050565b60006020808385031215612c7d57600080fd5b82516001600160401b03811115612c9357600080fd5b8301601f81018513612ca457600080fd5b8051612cb2612831826127ed565b81815260059190911b82018301908381019087831115612cd157600080fd5b928401925b82841015612cf8578351612ce9816121bb565b82529284019290840190612cd6565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612d4357612d43612d19565b5060010190565b60208082526023908201527f54696d656c6f636b436f6e74726f6c6c65723a206c656e677468206d69736d616040820152620e8c6d60eb1b606082015260800190565b6000808335601e19843603018112612da457600080fd5b8301803591506001600160401b03821115612dbe57600080fd5b60200191503681900382131561221157600080fd5b81835260006020808501808196508560051b810191508460005b87811015612e565782840389528135601e19883603018112612e0e57600080fd5b870180356001600160401b03811115612e2657600080fd5b803603891315612e3557600080fd5b612e428682898501612990565b9a87019a9550505090840190600101612ded565b5091979650505050505050565b60a0808252810188905260008960c08301825b8b811015612ea6578235612e89816121bb565b6001600160a01b0316825260209283019290910190600101612e76565b5083810360208501528881526001600160fb1b03891115612ec657600080fd5b8860051b9150818a602083013781810191505060208101600081526020848303016040850152612ef781888a612dd3565b6060850196909652505050608001529695505050505050565b60008219821115612f2357612f23612d19565b500190565b6020808252602a908201527f54696d656c6f636b436f6e74726f6c6c65723a206f7065726174696f6e206973604082015269206e6f7420726561647960b01b606082015260800190565b600060208284031215612f8457600080fd5b5051919050565b600060ff821660ff841680821015612fa557612fa5612d19565b90039392505050565b600082821015612fc057612fc0612d19565b500390565b634e487b7160e01b600052602160045260246000fd5b60008251612fed8184602087016126e6565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212206a0ceb93fe88d0361d73799564c300f3111c24c977a897f857df848f5aa24d0b64736f6c63430008080033",
  "implementation": "0x180326708FDDF39C38294b28fF89a829Bcae9688",
  "devdoc": {
    "details": "Modified OpenZeppelin Timelock under requirements Overnight Support two mode: - MOTHER CHAIN - CHILD CHAIN In Mother Chain mode: MotherTimelock exist on same chain with AgentTimelock. MotherTimelock directly change ovnAgent or upgrade AgentTimelock Available methods: - setOvnAgent - setNewImplementation In Child Chain Mode: MotherTimelock exist on a different basic chain from AgentTimelock MotherTimelock send transaction to Axelar on Mother Chain Axelar send translation to Child Chain Axelar Gateway on Child Chain call method directly: execute Available methods: - execute [Not to be confused with methods Timelock: execute, executeBatch]",
    "kind": "dev",
    "methods": {
      "_onlyAgent()": {
        "details": "Calling in modifier onlyAgent (see TimelockControllerUpgradeable) Checks permissions for executing methods: - schedule - scheduleBatch"
      },
      "_onlyAgentMembers()": {
        "details": "Calling in modifier onlyAgentMembers (see TimelockControllerUpgradeable) Checks permissions for executing methods: - cancel - execute - executeBatch Allow calling methods only ovnAgent or members of ovnAgent"
      },
      "cancel(bytes32)": {
        "details": "Cancel an operation. Requirements: - the caller must have the 'canceller' role."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "execute(address,uint256,bytes,bytes32,bytes32)": {
        "details": "Execute an (ready) operation containing a single transaction. Emits a {CallExecuted} event. Requirements: - the caller must have the 'executor' role."
      },
      "execute(bytes32,string,string,bytes)": {
        "details": "Allow to update ovnAgent or newImplementation by Axelar How is it working? MotherTimelock (Optimism) > send translation to Axelar -> Axelar Gateway execute it Working only on CHILD Chain",
        "params": {
          "payload": "- ['ActionOnAgent(uint256)', 'setAddress(address)'] Available params: ActionOnAgent:  0 - SET_NEW_AGENT  1 -  UPGRADE_TIMELOCK setAddress: - Address a new OvnAgent - Address a new implementation"
        }
      },
      "executeBatch(address[],uint256[],bytes[],bytes32,bytes32)": {
        "details": "Execute an (ready) operation containing a batch of transactions. Emits one {CallExecuted} event per transaction in the batch. Requirements: - the caller must have the 'executor' role."
      },
      "getMinDelay()": {
        "details": "Returns the minimum delay for an operation to become valid. This value can be changed by executing an operation that calls `updateDelay`."
      },
      "getTimestamp(bytes32)": {
        "details": "Returns the timestamp at which an operation becomes ready (0 for unset operations, 1 for done operations)."
      },
      "hashOperation(address,uint256,bytes,bytes32,bytes32)": {
        "details": "Returns the identifier of an operation containing a single transaction."
      },
      "hashOperationBatch(address[],uint256[],bytes[],bytes32,bytes32)": {
        "details": "Returns the identifier of an operation containing a batch of transactions."
      },
      "isOperation(bytes32)": {
        "details": "Returns whether an id correspond to a registered operation. This includes both Pending, Ready and Done operations."
      },
      "isOperationDone(bytes32)": {
        "details": "Returns whether an operation is done or not."
      },
      "isOperationPending(bytes32)": {
        "details": "Returns whether an operation is pending or not. Note that a \"pending\" operation may also be \"ready\"."
      },
      "isOperationReady(bytes32)": {
        "details": "Returns whether an operation is ready for execution. Note that a \"ready\" operation is also \"pending\"."
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155Receiver-onERC1155BatchReceived}."
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155Receiver-onERC1155Received}."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "schedule(address,uint256,bytes,bytes32,bytes32,uint256)": {
        "details": "Schedule an operation containing a single transaction. Emits {CallSalt} if salt is nonzero, and {CallScheduled}. Requirements: - the caller must have the 'proposer' role."
      },
      "scheduleBatch(address[],uint256[],bytes[],bytes32,bytes32,uint256)": {
        "details": "Schedule an operation containing a batch of transactions. Emits {CallSalt} if salt is nonzero, and one {CallScheduled} event per transaction in the batch. Requirements: - the caller must have the 'proposer' role."
      },
      "setNewImplementation(address)": {
        "details": "Set a new implementation address Working only on MOTHER Chain Calling only MOTHER TIMELOCK"
      },
      "setOvnAgent(address)": {
        "details": "Set a new OVN Agent Working only on MOTHER Chain Calling only MOTHER TIMELOCK"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateDelay(uint256)": {
        "details": "Changes the minimum timelock duration for future operations. Emits a {MinDelayChange} event. Requirements: - the caller must be the timelock itself. This can only be achieved by scheduling and later executing an operation where the timelock is the target and the data is the ABI-encoded call to this function."
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "motherTimelock": {
        "details": "Timelock to allow to change ovnAgent If is it mother chain (Optimism) then need to execute method: setOvnAgent() if is it child chain (!Optimism) then need to use Axelar Gateway"
      },
      "ovnAgent": {
        "details": "Confidant MultiSig - allow to change protocol USD+ Can execute methods: - schedule - scheduleBatch Members of MultiSig: Can execute methods: - cancel - execute - executeBatch"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "execute(bytes32,string,string,bytes)": {
        "notice": "[ONLY CHILD CHAIN MODE]"
      },
      "setNewImplementation(address)": {
        "notice": "[ONLY MOTHER CHAIN MODE]"
      },
      "setOvnAgent(address)": {
        "notice": "[ONLY MOTHER CHAIN MODE]"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1044,
        "contract": "contracts/AgentTimelock.sol:AgentTimelock",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1047,
        "contract": "contracts/AgentTimelock.sol:AgentTimelock",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2333,
        "contract": "contracts/AgentTimelock.sol:AgentTimelock",
        "label": "_timestamps",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2335,
        "contract": "contracts/AgentTimelock.sol:AgentTimelock",
        "label": "_minDelay",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3115,
        "contract": "contracts/AgentTimelock.sol:AgentTimelock",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 1026,
        "contract": "contracts/AgentTimelock.sol:AgentTimelock",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1341,
        "contract": "contracts/AgentTimelock.sol:AgentTimelock",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1874,
        "contract": "contracts/AgentTimelock.sol:AgentTimelock",
        "label": "ovnAgent",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 1877,
        "contract": "contracts/AgentTimelock.sol:AgentTimelock",
        "label": "motherTimelock",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 1879,
        "contract": "contracts/AgentTimelock.sol:AgentTimelock",
        "label": "motherChainId",
        "offset": 0,
        "slot": "153",
        "type": "t_string_storage"
      },
      {
        "astId": 1882,
        "contract": "contracts/AgentTimelock.sol:AgentTimelock",
        "label": "gateway",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(IAxelarGateway)395"
      },
      {
        "astId": 1884,
        "contract": "contracts/AgentTimelock.sol:AgentTimelock",
        "label": "newImplementation",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAxelarGateway)395": {
        "encoding": "inplace",
        "label": "contract IAxelarGateway",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}